generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String @id @default(cuid())
  email       String @unique
  username    String @unique
  clerkId     String @unique
  name        String?
  bio         String?
  image       String?
  location    String?
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // RELATIONS: 
  posts     Post[] // One-to-many
  comments  Comment[] // One-to-many
  likes     Like[] // One-to-many

  followers Follows[] @relation("following") // users who follow this user
  following Follows[] @relation("follower") // users this user follows

  notifications         Notification[] @relation("userNotifications") // notifications received by a user
  notificationsCreated  Notification[] @relation("notificationCreator") // notifications triggered by a user
}


model Post{
  id          String    @id @default(cuid())
  authorId    String
  content     String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // RELATIONS
  // cascade delete means delete all posts if author is deleted
  author        User @relation(fields: [authorId],references: [id], onDelete: Cascade) 
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
}


model Comment{
  id          String @id @default(cuid())
  content     String
  authorId    String
  postId      String
  createdAt   DateTime @default(now())

  // RELATIONS
  author        User @relation(fields: [authorId],references: [id],onDelete: Cascade)
  post          Post @relation(fields: [postId],references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([authorId,postId]) // composite index for faster queries
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  // RELATIONS
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId,postId]) // composite index for faster queries
  @@unique([userId,postId]) // this prevents same user liking post twice
}

model Follows{
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  // RELATIONS
  follower    User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@index([followerId,followingId]) // composite index for faster queries
  @@id([followerId, followingId]) // composite primary key prevents duplicate follows
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  creatorId String
  type      NotificationType
  read      Boolean  @default(false)
  postId    String?
  commentId String?
  createdAt DateTime @default(now())
  
  // RELATIONS
  user      User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator   User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE     
  COMMENT 
  FOLLOW   
}